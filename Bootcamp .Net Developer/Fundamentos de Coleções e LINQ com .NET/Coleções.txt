
## Ordenando Arrays

Existem diversos tipos de algoritmos, a ideia é entender diversos tipos de algoritmos para saber como eles funcionam mas o pró´rioi .NET faz essa ordenação automaticamente

###Algoritmo de ordenação Bubble Sort

O Algoritmo Bubble Sort é um metodo de ordenação de arrays que funciona com a comparação
Se o dado atual for maior que o dado anterior, trocamos os elementos de posição, assim os elementos maiores são colocados nas posições mais adiante
  
```C#


using colecoes.Helper;

OperacoesArray  op = new OperacoesArray();

int[] array = new int[5] { 4, 9, 1, 3, 2 };

Console.WriteLine("Array original");
op.ImprimirArray(array);

op.OrdenarBubblueSort(ref array);

Console.WriteLine("Array ordenado");
op.ImprimirArray(array);

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace colecoes.Helper
{
    public class OperacoesArray
    {
        public void OrdenarBubblueSort(ref int[] array)
        {
            int temp = 0;
            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array.Length-1; j++)
                {
                    if (array[j] > array[j + 1])
                    {
                        temp = array[j + 1];
                        array[j+1] = array[j];
                        array[j] = temp;
                    }
                }
            }
        }

        public void ImprimirArray(int[] array)
        {
            for(int i = 0; i < array.Length; i++)
            {
                Console.WriteLine(array[i]);
            }
        }

    }
}





###Selection Sort

O algoritmo Selction Sort marca a posição do array e procura o menor elemento a partir dele.


##Classe Array

O C# Possui uma classe própria para trabalhar com array, chamada Array.

###Copiar um Array


```C#
OperacoesArray  op = new OperacoesArray();

int[] array = new int[5] { 4, 9, 1, 3, 2 };
int[] array2 = new int[10];


  public void Copiar(ref int[] array, ref int[] arrayNovo)
            {
            Array.Copy(array, arrayNovo, array.Length);
            }
Console.WriteLine("Array original");
op.ImprimirArray(array);

op.Copiar(ref array,ref array2);

Console.WriteLine("Array copiado");
op.ImprimirArray(array2);

###Verificar se um elemento existe dentro de um array

```C#
using colecoes.Helper;

OperacoesArray  op = new OperacoesArray();

int[] array = new int[5] { 4, 9, 1, 3, 2 };
int[] array2 = new int[10];

int valorProcurado = 3;
bool existe = op.Existe(array, valorProcurado);

if(existe)
    Console.WriteLine($"O valor {valorProcurado} existe!");
else
    Console.WriteLine($"O valor {valorProcurado} não existe!");

     public bool Existe(int[]array, int valor)
        {
            return Array.Exists(array, elemento => elemento == valor);
        }
 ### Verificar se todos elementos do array satisfazem uma determinada condição

   
Utilizar metodo do array true for all, conforme código
 
```#C
public bool TodosMaiorQue(int[] array, int valor)
        {
            return Array.TrueForAll(array, elemento => elemento > valor);
        }
### Encontrar um elemento no array.

Quando manipulamos array temos em mente que o valor default do array é zero
Caso não acharmos nenhum valor o metodo retorna zero

 public int ObterValor(int[] array, int valor)// retorna um valor numérico que tem o valor do elemento passado na classe main
        {
            return Array.Find(array, element => element == valor);
        }
### Obter indice de um elemento o array

  public int ObterIndice(int[]array, int valor)
        {
            return Array.IndexOf(array,valor);
        }
Utilizando o metodo indexof o array retorna -1 quando não possui valor atribuido.

### Redimensionar o Array em tempo de execução
Enviar o Array por referencia pois estamos manipulando o array.
Lembrar sempre que o array é tem seu tamanho imutável ou seja essa função faz uma cópia do array em outra variável e mantem o nome

public void RedmensionarArray(ref int[] array, int novoTamanho )
        {
            Array.Resize(ref array,novoTamanho);
        }
### Convertendo um Array
Faz a conversão completa de elemento a elemento 

public string[] ConverterParaArrayString(int[] array)
        {
            return Array.ConvertAll(array, elemento => elemento.ToString());//no Caso aqui é  a linha de conversão
	}
## Coleções Genéricas
Agrupam valores padronizados de vários tipos de dados, Objetos, String, Arrays, Etc.
Algumas outras característcas:
Facil de ser ordenado.
Obtem valor por indice.
Valores dinamicos.

Basicamente é uma abstração de arrays, pois a lista trabalho com arrays internamente.

Classes `System.Collection.Generic`

Uma lista contem o identificador T que é genérico onde podemos colocar valores como String, Int, Object, etc.
Podemos manipular os itens da lista utilizando métodos internos da estrutra de dados da coleção correspondente


##LIST - LISTA ()

List<string> estados = new List<string>();//inserindo elementos na lista

### Adicionando Elementos

estados.Add("SP");
estados.Add("MG");
estados.Add("BA");

### Contando elementos e consultando lista

Console.WriteLine($"Quantidades de elementos na lista{estados.Count}");//Contando elementos da lista

foreach(var item in estados)
{
    Console.WriteLine(item);//Consultando elementos da lista com foreach
}


estados.Remove("MG"); //removendo elemento da lista

for (int i = 0;i<estados.Count; i++ )
{
    Console.WriteLine($"Indice {i}, Valor: {estados[i]}");// consultando elementos da lista com for
}
----------------------
Refatorando o Código podemos Criar uma classe

para as operações da lista

```C#

    public class OperacoesLista
    {

        public void ImprimirListaString(List<string> lista)
        {

            for (int i = 0; i < lista.Count; i++)
            {
                Console.WriteLine($"Indice {i}, Valor: {lista[i]}");// consultando elementos da lista com for
            }
        }
    }

//na main:
opLista.ImprimirListaString(estados);

### Removendo elementos da lista
Ao remover um item de uma lista, lembrar que a lista irá rearranjar seus indices, ou seja, se removido um item do meio
todos os itens após tem seu indice decrementados de 1.

Console.WriteLine("Removendo elemento");
estados.Remove("Mg");

opLista.ImprimirListaString(estados);

###Adicionar coleções na lista

OperacoesLista opLista = new OperacoesLista();
``` C#
string[] EstadosArray = new string[2] { "SC", "MT" };

List<string> estados = new List<string> { "SP", "MG", "BA" };//inserindo elementos na lista

estados.AddRange(EstadosArray);  // Adciona os elementos do Array na Lista

opLista.ImprimirListaString(estados);


Tendo uma coleção do mesmo tipo, podemos mesclar os elementos para a coleção lista.

### Adicionando elemento por índice.


estados.Insert(1, "RJ");

A linha de código coloca o valor RJ exatamente no Indice 1, depois de SP, antes de MG.


## Coleções Específicas
Possui um ordenamento na manipulação dos seus dados

### Queue - Fila (FIFO - FIRST IN FIRST OUT)

Obedece a ordem de entrada, sempre o primeiro que entrou será o primeiro a sair, comparando com uma fila de mercado.

Add - Slide

#### Declaração da Fila

`Queue<string> fila = new Queue<string>();`

#### Adicionando um elemento na fila

`fila.Enqueue("");`

#### Removendo elemento da fila

`fila.Dequeue("");`

#### Metodo PEEK
`fila.Peek()`
Retorna um valor da frente da fila mas não remove

### Contando elementos da fila
`fila.Count`

#### Atendendo uma fila na prática.

```C#
Queue<string> fila = new Queue<string>();

fila.Enqueue("Guilherme");
fila.Enqueue("Priscila");
fila.Enqueue("Edna");

while (fila.Count > 0)
{
    Console.WriteLine($"Vez de: {fila.Peek()}");
    Console.WriteLine( fila.Dequeue()+ " Atendido");
}





###Stack - Pillha (LIFO - LAST IN FIRST OUT) 

Obedece a ordem de empilhamento, empre o ultimo a chegar será o primeiro a sair, comparado a uma pilha de livros.

add. Slide



#### Empilhamento

`pilhaLivros.Push(".NET")`

Coloca livro na Pilha

#### Consulta Quantidade da pilha

Console.WriteLine($"Quantidade de livros para leitura {pilhaLivros.Count}");

#### Remove o livro da pilha
`Console.WriteLine($" {pilhaLivros.Pop()}, lido com sucesso.");`


## Dictionary - Dicionários
Dicionário é uma cocleção de chave e valor, que é um indice único que é armazenado em hash.
Para acessarmos um dado daquela coleção usamos um código unico para aquele elemento.

### Declarando Dicionários

Dictionary<string, string> estados = new Dictionary<string, string>(); par de tipos de dados para acesso do dado

### Adcionando Dicionário

estados.Add("SP", "São Paulo"); 

Para adicionar um dicionários temos que fornecer uma Chave e Um valor.
Não podemos criar chaves repetidas.

### Lendo Dicionário
foreach (KeyValuePair<string, string> item in estados )
{

    Console.WriteLine($"Chave: {item.Key}, Valor:{item.Value}"); 


}

### Acessando valor 

Para acessar um valor sempre temos que acessar pela chave.

string valorProcurado = "BA";
Console.WriteLine(estados[valorProcurado]);

Sempre que passarmos a chave o algoritmo irá nos retornar o value.

###Atualizando um valor

Para alterar o valor precisamos passar a chave

string valorProcurado = "BA";
estados[valorProcurado] = ("Atualização");
Console.WriteLine(estados[valorProcurado]);

Trocou Bahia pela palavra Atualizaçao.

###Removendo um valor

estados.Remove(valorProcurado); // A chave que remove o valor.

###Saber se uma chave existe antes de tentar acessa-la

Para que não haja bug em tempo compilação temos o metodo TryGetValue, para confirmar se existe a chave do valor que eu estou tentando acessar.


if(estados.TryGetValue(valorProcurado, out string estadoEncontrado))// Chave definida durante o programa
{
    Console.WriteLine(estadoEncontrado);
}else
{
    Console.WriteLine($"Chave {valorProcurado} não existe no dicionário! ");
}

O metodo TryGetValue permite que se haja erro na chave o programa não gere erro em tempo de compilação.


###Operações LINQ - Assistir aulas novamente e refazer anotações

Language-Interated Query







    